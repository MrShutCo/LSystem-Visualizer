@page "/"
@using System.Numerics
@using Blazor.Extensions.Canvas.Canvas2D
@using ShutCo.UI.Core
@using ShutCo.UI.Core.Rules
<PageTitle>Home</PageTitle>

<div class="container">
    <div class="row">
        <div class="col">
            <div class="row">
                <h1>@GetCurrentLSystem().Name</h1>

                <h4>Starting Word</h4>
                <p>@GetCurrentLSystem().StartingWord</p>

                <h4>Production Rules</h4>
                @foreach (var prodRule in GetCurrentLSystem().ProductionRules)
                {
                switch (prodRule)
                {
                case SimpleProdRule rule:
                <p>@rule.Predecessor → @LSystem.WordToString(rule.Successor)</p>
                break;
                case KLContextRule klrule:
                <p>@klrule.ToString()</p>
                break;
                case StochasticRule stochastic:
                {
                <p>@stochastic.Predecessor → </p>
                <ul>
                    @for (int i = 0; i < stochastic.Successors.Count; i++)
                    {
                    <li>(Weight: @Math.Round(stochastic.Weights[i])) @LSystem.WordToString(stochastic.Successors[i])</li>
                    }
                </ul>
                break;
                }
                }
                }
            </div>
            <div class="container">
                <div class="form-group row">
                    <label for="iter" class="col-sm-4 col-form-label">Iterations</label>
                    <div class="col-sm-4"><InputNumber id="iter" class="form-control" placeholder="Iterations" @bind-Value="iterations" /></div>
                </div>
                <div class="form-group row">
                    <label for="system" class="col-sm-4 col-form-label">L-System</label>
                    <div class="col-sm-4">
                        <select @onchange="OnSelect">
                            @for (int i = 0; i < _lSystems.Count; i++)
                            {
                            <option value="@i">@_lSystems[i].Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group row">
                    <label for="size" class="col-sm-4 col-form-label">Brush Length</label>
                    <div class="col-sm-4"><InputNumber id="iter" class="form-control" placeholder="Brush Length" @bind-Value="brushLength" /></div>
                </div>
                <div class="form-group row">
                    <label for="iterScalar" class="col-sm-4 col-form-label">Iteration Scalar</label>
                    <div class="col-sm-4"><InputNumber id="iterScalar" class="form-control" placeholder="1" @bind-Value="iterScalar" /></div>
                </div>
                <div class="form-group row">
                    <label for="position" class="col-sm-4 col-form-label">Starting Position</label>
                    <div class="col-sm-4"><InputText id="position" class="form-control" placeholder="0,0" @bind-Value="startingPos" /></div>
                </div>
                <div class="form-group row">
                    <label for="delay" class="col-sm-4 col-form-label">Delay</label>
                    <div class="col-sm-4"><InputNumber id="delay" class="form-control" placeholder="0,0" @bind-Value="delay" /></div>
                </div>

                <button class="btn btn-primary col-sm-3" @onclick="Reset">Reset</button>
                <button class="btn btn-primary col-sm-3" @onclick="Start">Start</button>
            </div>
        </div>
        <div style="border-style: solid;" class="col">
            @* <canvas id="canvas" onmouse></canvas> *@
            @* <BECanvas Width="512" Height="512" @ref="_canvasReference" ></BECanvas> *@
            <Turtle @ref="_turtle" Width="700" Height="700" />
        </div>
    </div>
</div>



<p>Generated Words</p>
@foreach (var g in derivations)
{
    <p>@g</p>
}

@code {
    
    private Canvas2DContext _context;
    
    private LSystem GetCurrentLSystem() => _lSystems[_selectedLSystemIndex];

    int delay;
    private Turtle _turtle;
    private int iterations = 1;
    private float brushLength = 300f;
    private int _selectedLSystemIndex;
    private float iterScalar = 1f;
    private string startingPos = "";
    private static readonly Random _random = new();

    List<string> derivations = [];
    
    
    List<LSystem> _lSystems =
    [
        new LSystem("Example 2", "-F", [new SimpleProdRule("F", "F+F-F-F+F")], 300, 90, 2.9f),
        new LSystem("Quadratic Koch Island", "F-F-F-F", [new SimpleProdRule("F", "F-F+F+FF-F-F+F")], 300, 90, 4),
        new LSystem("Quadratic Island Lake", "F+F+F+F+", [new SimpleProdRule("F", "F+f-FF+F+FF+Ff+FF-f+FF-F-FF-Ff-FFF"),new SimpleProdRule("f","ffffff")], 300, 90, 8),
        new LSystem("Dragon Curve", "L", [new SimpleProdRule("L", "L+R+"), new SimpleProdRule("R", "-L-R")], 300, 90, 1.5f),
        new LSystem("Sierpinski Gasket", "R", [new SimpleProdRule("L", "R+L+R"), new SimpleProdRule("R", "L-R-L")], 300, 60, 2),
        new LSystem("Hexagonal Gosper Curve", "L", [new SimpleProdRule("L", "L+R++R-L--LL-R+"), new SimpleProdRule("R","-L+RR++R+L--L-R")], 300, 60, 2.7f),
        new LSystem("Plant 1", "F", [new SimpleProdRule("F", "F[+F]F[-F]F")], 100, 25.7f, 2),
        new LSystem("Plant 2", "F", [new SimpleProdRule("F", "FF-[-F+F+F]+[+F-F-F]")], 300, 22.5f, 2.5f),
        new LSystem("Plant 3", "X", [new SimpleProdRule("X", "F-[[X]+X]+F[+FX]-X"), new SimpleProdRule("F", "FF")], 300, 22.5f, 2.5f),
        new LSystem("Plant 4", "X", [new SimpleProdRule("X", "F[+X][-X]FX"), new SimpleProdRule("F", "FF")], 300, 25.7f, 2.5f),

        new LSystem("Space filling Curve", "-L", [new SimpleProdRule("L", "LF+RFR+FL-F-LFLFL-FRFR+"),new SimpleProdRule("R","-LFLF+RFRFR+F+RF-LFL-FR")], 300, 90, 4),
        new LSystem("Stochastic Tree", "F", [new StochasticRule(_random, "F", ["F[+F]F[-F]F", "F[+F]F", "F[-F]F"], [1,1,1])], 300, 22.5f, 2.5f)
    ];

    List<(Vector2, float)> startingPositions =
    [
        (new Vector2(-175,-100), 0),
        (new Vector2(-150,-150), 0),
        (new Vector2(100,-100), 0),
        (new Vector2(0,0), 0),
        (new Vector2(0,-150), 0),
        (new Vector2(150,0), 0),
        (new Vector2(0,-200), 0),
        (new Vector2(0,-200), 0),
        (new Vector2(0,-200), 0),
        (new Vector2(0,-200), 0),
        (new Vector2(0,0), 0),
        (new Vector2(0,0), 0),
        (new Vector2(0,-300), 0),
        (new Vector2(0,-300), 0),
        (new Vector2(0,-300), 0),
        (new Vector2(0,-300), 0),
        (new Vector2(0,0), 0),
    ];

    protected override void OnInitialized()
    {
        _lSystems.Add(new LSystem("Context Grammar 1", "F1F1F1", [
            new KLContextRule("0", "0", "0", "0"),
            new KLContextRule("0", "0", "1", "1[+F1F1]"),
            new KLContextRule("0", "1", "0", "1"),
            new KLContextRule("0", "1", "1", "1"),
            new KLContextRule("1", "0", "0", "0"),
            new KLContextRule("1", "0", "1", "1F1"),
            new KLContextRule("1", "1", "0", "0"),
            new KLContextRule("1", "1", "1", "0"),
            new SimpleProdRule("+", "-"),
            new SimpleProdRule("-", "+"),
        ], 40, 22.5f, 1f));
        _lSystems[^1].Ignore = ["+", "-", "F", "[", "]"];
        
        _lSystems.Add(new LSystem("Context Grammar 2", "F1F1F1", [
            new KLContextRule("0", "0", "0", "1"),
            new KLContextRule("0", "0", "1", "1[-F1F1]"),
            new KLContextRule("0", "1", "0", "1"),
            new KLContextRule("0", "1", "1", "1"),
            new KLContextRule("1", "0", "0", "0"),
            new KLContextRule("1", "0", "1", "1F1"),
            new KLContextRule("1", "1", "0", "1"),
            new KLContextRule("1", "1", "1", "0"),
            new SimpleProdRule("+", "-"),
            new SimpleProdRule("-", "+"),
        ], 40, 22.5f, 1.04f));
        _lSystems[^1].Ignore = ["+", "-", "F", "[", "]"];
        
        _lSystems.Add(new LSystem("Context Grammar 3", "F1F1F1", [
            new KLContextRule("0", "0", "0", "0"),
            new KLContextRule("0", "0", "1", "1"),
            new KLContextRule("0", "1", "0", "0"),
            new KLContextRule("0", "1", "1", "1[+F1F1]"),
            new KLContextRule("1", "0", "0", "0"),
            new KLContextRule("1", "0", "1", "1F1"),
            new KLContextRule("1", "1", "0", "0"),
            new KLContextRule("1", "1", "1", "0"),
            new SimpleProdRule("+", "-"),
            new SimpleProdRule("-", "+"),
        ], 40, 25.75f, 1.04f));
        _lSystems[^1].Ignore = ["+", "-", "F", "[", "]"];
        
        _lSystems.Add(new LSystem("Context Grammar 4", "F0F1F1", [
            new KLContextRule("0", "0", "0", "1"),
            new KLContextRule("0", "0", "1", "0"),
            new KLContextRule("0", "1", "0", "0"),
            new KLContextRule("0", "1", "1", "1F1"),
            new KLContextRule("1", "0", "0", "1"),
            new KLContextRule("1", "0", "1", "1[+F1F1]"),
            new KLContextRule("1", "1", "0", "1"),
            new KLContextRule("1", "1", "1", "0"),
            new SimpleProdRule("+", "-"),
            new SimpleProdRule("-", "+"),
        ], 40, 25.75f, 1.04f));
        _lSystems[^1].Ignore = ["+", "-", "F", "[", "]"];
        
        _lSystems.Add(new LSystem("Fibonacci Bush", "A", [
            new SimpleProdRule("A", "[B//////'B///////'B]"),
            new SimpleProdRule("B", "[]&SL!A"),
            new SimpleProdRule("S", "FL"),
            new SimpleProdRule("F", "F/////S"),
            new SimpleProdRule("L", " ['''^^{-f+f+f-|-f+f+f}]")
        ], 100, 22.5f, 2));
        
        Select(0);
    }

    private async Task Reset()
    {
        await _turtle.Reset();
        _turtle.PenVisible = false;
        _turtle.PenSize = 1;
        
        await _turtle.MoveTo(0, 0);
    }

    private async Task Start()
    {
        var lSystem = _lSystems[_selectedLSystemIndex];
        derivations = [];
        _turtle.Delay = delay;
        var pattern = LSystem.StringToWord(lSystem.StartingWord); 
        for (int i = 0; i < iterations; i++)
        {
            var step = lSystem.StepLSystem(pattern, 1);
            derivations.Add(LSystem.WordToString(step));
            pattern = step;
        }

        await Reset();

        var (oldD, oldS) = (lSystem.Distance, lSystem.ScalingSize);
        lSystem.Distance = brushLength;
        lSystem.ScalingSize = iterScalar;

        var (_, startingAngle) = startingPositions[_selectedLSystemIndex];
        var startingPos = ParseStartingPosition();

        _turtle.PenVisible = false;
        await _turtle.MoveTo(startingPos.X, startingPos.Y);
        await _turtle.RotateTo(startingAngle);
        foreach (var letter in pattern)
        {
            await lSystem.StepTurtle(letter, _turtle, iterations);
        }

        (lSystem.Distance, lSystem.ScalingSize) = (oldD, oldS);
    }

    private Vector2 ParseStartingPosition()
    {
        var pos = startingPos.Split(",");
        if (pos.Length != 2) return new Vector2(0, 0);
        return new Vector2(int.Parse(pos[0]), int.Parse(pos[1]));
    }
    
    private void OnSelect(ChangeEventArgs e)
    {
        var s = int.Parse(e.Value.ToString());
        Select(s);
    }

    void Select(int s)
    {
        _selectedLSystemIndex = s;
        brushLength = _lSystems[s].Distance;
        iterScalar = _lSystems[s].ScalingSize;
        startingPos = $"{startingPositions[s].Item1.X},{startingPositions[s].Item1.Y}";   
    }

}